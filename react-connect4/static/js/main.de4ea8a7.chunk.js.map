{"version":3,"sources":["Disc.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Disc","props","colour","onClick","disc","className","role","tabIndex","Board","i","this","gameGrid","key","discs","onReset","push","renderDisc","type","React","Component","StatusDisplay","statusMessage","statusColour","p1IsNext","winner","tied","spinningDisc","App","state","Array","fill","determineWinner","toString","length","discIndex","findOpenSpace","newGameGrid","slice","setState","row","col","firstIndex","column","handleClick","handleReset","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.de4ea8a7.chunk.js","sourcesContent":["/* eslint-disable class-methods-use-this */\nimport React from 'react';\nimport './Disc.css';\n\nfunction Disc(props) {\n  const { colour, onClick } = props;\n\n  let disc = <div className=\"disc-white\" />;\n\n  if (colour === 'Y')\n    disc = (\n      <div className=\"disc-border-Y\">\n        <div className=\"disc-middle-Y\" />\n      </div>\n    );\n  else if (colour === 'R')\n    disc = (\n      <div className=\"disc-border-R\">\n        <div className=\"disc-middle-R\" />\n      </div>\n    );\n  else disc = <div className=\"disc-white\" />;\n\n  return (\n    // eslint-disable-next-line jsx-a11y/click-events-have-key-events\n    <div\n      role=\"button\"\n      tabIndex=\"0\"\n      className=\"disc-blue\"\n      onClick={onClick}\n      // onKeyDown={onClick} // need for accessibility\n    >\n      {disc}\n    </div>\n  );\n}\n\nexport default Disc;\n","/* eslint-disable class-methods-use-this */\nimport React from 'react';\nimport './Board.css';\nimport Disc from './Disc';\n\nclass Board extends React.Component {\n  renderDisc(i) {\n    const { gameGrid, onClick } = this.props;\n\n    return <Disc key={i} colour={gameGrid[i]} onClick={() => onClick(i)} />;\n  }\n\n  render() {\n    const discs = [];\n    const { onReset } = this.props;\n\n    for (let i = 0; i < 42; i += 1) discs.push(this.renderDisc(i));\n\n    return (\n      <div>\n        <div className=\"board\">{discs}</div>\n        <br />\n        <button type=\"button\" className=\"reset-button\" onClick={onReset}>\n          Reset\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","/* eslint-disable class-methods-use-this */\nimport React from 'react';\nimport './App.css';\nimport Board from './Board';\nimport './Disc.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameGrid: Array(42).fill(null),\n      p1IsNext: true,\n    };\n  }\n\n  handleClick(i) {\n    if (this.determineWinner() !== null) return;\n\n    const { gameGrid, p1IsNext } = this.state;\n    if (gameGrid.toString().length > 82) return;\n\n    const discIndex = this.findOpenSpace(i);\n\n    if (discIndex < 0) return;\n\n    const newGameGrid = gameGrid.slice();\n    newGameGrid[discIndex] = p1IsNext ? 'R' : 'Y';\n\n    this.setState({\n      gameGrid: newGameGrid,\n      p1IsNext: !p1IsNext,\n    });\n  }\n\n  determineWinner() {\n    const { gameGrid } = this.state;\n\n    // Search for horizontal wins\n    for (let row = 0; row < 6; row += 1)\n      for (let col = 0; col < 4; col += 1) {\n        const firstIndex = row * 7 + col;\n        if (\n          gameGrid[firstIndex] !== null &&\n          gameGrid[firstIndex] === gameGrid[firstIndex + 1] &&\n          gameGrid[firstIndex] === gameGrid[firstIndex + 2] &&\n          gameGrid[firstIndex] === gameGrid[firstIndex + 3]\n        )\n          return gameGrid[firstIndex];\n      }\n\n    // Search for vertical wins\n    for (let row = 0; row < 3; row += 1)\n      for (let col = 0; col < 7; col += 1) {\n        const firstIndex = row * 7 + col;\n        if (\n          gameGrid[firstIndex] !== null &&\n          gameGrid[firstIndex] === gameGrid[firstIndex + 7] &&\n          gameGrid[firstIndex] === gameGrid[firstIndex + 14] &&\n          gameGrid[firstIndex] === gameGrid[firstIndex + 21]\n        )\n          return gameGrid[firstIndex];\n      }\n\n    // Search for diag-down wins\n    for (let row = 0; row < 3; row += 1)\n      for (let col = 0; col < 4; col += 1) {\n        const firstIndex = row * 7 + col;\n        if (\n          gameGrid[firstIndex] !== null &&\n          gameGrid[firstIndex] === gameGrid[firstIndex + 8] &&\n          gameGrid[firstIndex] === gameGrid[firstIndex + 16] &&\n          gameGrid[firstIndex] === gameGrid[firstIndex + 24]\n        )\n          return gameGrid[firstIndex];\n      }\n\n    // Search for diag-up wins\n    for (let row = 2; row < 6; row += 1)\n      for (let col = 0; col < 4; col += 1) {\n        const firstIndex = row * 7 + col;\n        if (\n          gameGrid[firstIndex] !== null &&\n          gameGrid[firstIndex] === gameGrid[firstIndex - 6] &&\n          gameGrid[firstIndex] === gameGrid[firstIndex - 12] &&\n          gameGrid[firstIndex] === gameGrid[firstIndex - 18]\n        )\n          return gameGrid[firstIndex];\n      }\n\n    return null;\n  }\n\n  handleReset() {\n    this.setState({\n      gameGrid: Array(42).fill(null),\n      p1IsNext: true,\n    });\n  }\n\n  findOpenSpace(i) {\n    const column = i % 7;\n    const { gameGrid } = this.state;\n\n    for (let row = 5; row >= 0; row -= 1)\n      if (gameGrid[row * 7 + column] === null) return row * 7 + column;\n\n    return -1;\n  }\n\n  render() {\n    const { gameGrid, p1IsNext } = this.state;\n    const tied = gameGrid.toString().length > 82;\n\n    return (\n      <center>\n        <div className=\"App\">\n          <StatusDisplay\n            p1IsNext={p1IsNext}\n            winner={this.determineWinner()}\n            tied={tied}\n          />\n          <Board\n            gameGrid={gameGrid}\n            onClick={(i) => this.handleClick(i)}\n            onReset={() => this.handleReset()}\n          />\n        </div>\n      </center>\n    );\n  }\n}\n\nfunction StatusDisplay(props) {\n  const { p1IsNext, winner, tied } = props;\n  let statusMessage;\n  let statusColour;\n  let spinningDisc = (\n    <div>\n      <br />\n      <br />\n    </div>\n  );\n\n  if (tied) {\n    statusMessage = 'Tie game!';\n    statusColour = 'status-T';\n  } else if (winner === null) {\n    statusMessage = `${p1IsNext ? 'Player 1' : 'Player 2'}, select a coin spot`;\n    statusColour = p1IsNext ? 'status-R' : 'status-Y';\n  } else {\n    statusMessage = `${\n      winner === 'R' ? 'Player 1' : 'Player 2'\n    } is the winner!`;\n    statusColour = winner === 'R' ? 'status-R' : 'status-Y';\n  }\n\n  if (winner === 'Y')\n    spinningDisc = (\n      <div className=\"disc-border-Y spinning-disc\">\n        <div className=\"disc-middle-Y\" />\n      </div>\n    );\n  else if (winner === 'R')\n    spinningDisc = (\n      <div className=\"disc-border-R spinning-disc\">\n        <div className=\"disc-middle-R\" />\n      </div>\n    );\n\n  return (\n    <center>\n      <br />\n      {spinningDisc}\n      <div className={statusColour}>{statusMessage}</div>\n    </center>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}